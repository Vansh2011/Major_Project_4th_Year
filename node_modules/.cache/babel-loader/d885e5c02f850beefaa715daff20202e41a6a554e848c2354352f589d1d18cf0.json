{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport productsData from \"../api/products.json\";\nimport FilterList from \"../api/FilterList.json\";\nconst loadStateFromLocalStorage = () => {\n  try {\n    const serializedState = localStorage.getItem(\"selectedFilters\");\n    if (serializedState === null) {\n      return [];\n    }\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.error(\"Could not load state from localStorage\", e);\n    return [];\n  }\n};\nconst saveStateToLocalStorage = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"selectedFilters\", serializedState);\n  } catch (e) {\n    console.error(\"Could not save state to localStorage\", e);\n  }\n};\nconst ProductSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    originalProducts: [...productsData],\n    products: [...productsData],\n    filters: [...FilterList],\n    selectedFilters: loadStateFromLocalStorage(),\n    filteredProducts: [...productsData] // Initialize with all products\n  },\n  reducers: {\n    addFilters(state, action) {\n      const updatedFilters = [...state.selectedFilters, action.payload];\n      saveStateToLocalStorage(updatedFilters);\n      state.selectedFilters = updatedFilters;\n\n      // Apply filters to the original products\n      state.filteredProducts = state.originalProducts.filter(product => updatedFilters.every(filter => {\n        const [key, value] = filter.split(\":\");\n        return product[key] === value;\n      }));\n    },\n    removeFilters(state) {\n      localStorage.removeItem(\"selectedFilters\");\n      state.selectedFilters = [];\n      state.filteredProducts = [...state.originalProducts];\n    }\n  }\n});\nexport default ProductSlice.reducer;\nexport const {\n  addFilters,\n  removeFilters\n} = ProductSlice.actions;","map":{"version":3,"names":["createSlice","productsData","FilterList","loadStateFromLocalStorage","serializedState","localStorage","getItem","JSON","parse","e","console","error","saveStateToLocalStorage","state","stringify","setItem","ProductSlice","name","initialState","originalProducts","products","filters","selectedFilters","filteredProducts","reducers","addFilters","action","updatedFilters","payload","filter","product","every","key","value","split","removeFilters","removeItem","reducer","actions"],"sources":["C:/Users/Vansh/Desktop/Projects/ideabuddy/src/redux/ProductSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport productsData from \"../api/products.json\";\r\nimport FilterList from \"../api/FilterList.json\";\r\n\r\nconst loadStateFromLocalStorage = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"selectedFilters\");\r\n    if (serializedState === null) {\r\n      return [];\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (e) {\r\n    console.error(\"Could not load state from localStorage\", e);\r\n    return [];\r\n  }\r\n};\r\n\r\nconst saveStateToLocalStorage = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"selectedFilters\", serializedState);\r\n  } catch (e) {\r\n    console.error(\"Could not save state to localStorage\", e);\r\n  }\r\n};\r\n\r\nconst ProductSlice = createSlice({\r\n  name: \"product\",\r\n  initialState: {\r\n    originalProducts: [...productsData],\r\n    products: [...productsData],\r\n    filters: [...FilterList],\r\n    selectedFilters: loadStateFromLocalStorage(),\r\n    filteredProducts: [...productsData], // Initialize with all products\r\n  },\r\n  reducers: {\r\n    addFilters(state, action) {\r\n      const updatedFilters = [...state.selectedFilters, action.payload];\r\n      saveStateToLocalStorage(updatedFilters);\r\n      state.selectedFilters = updatedFilters;\r\n\r\n      // Apply filters to the original products\r\n      state.filteredProducts = state.originalProducts.filter((product) =>\r\n        updatedFilters.every((filter) => {\r\n          const [key, value] = filter.split(\":\");\r\n          return product[key] === value;\r\n        })\r\n      );\r\n    },\r\n    removeFilters(state) {\r\n      localStorage.removeItem(\"selectedFilters\");\r\n      state.selectedFilters = [];\r\n      state.filteredProducts = [...state.originalProducts];\r\n    },\r\n  },\r\n});\r\n\r\nexport default ProductSlice.reducer;\r\nexport const { addFilters, removeFilters } = ProductSlice.actions;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EACtC,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC/D,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAO,EAAE;IACX;IACA,OAAOG,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,CAAC,CAAC;IAC1D,OAAO,EAAE;EACX;AACF,CAAC;AAED,MAAMG,uBAAuB,GAAIC,KAAK,IAAK;EACzC,IAAI;IACF,MAAMT,eAAe,GAAGG,IAAI,CAACO,SAAS,CAACD,KAAK,CAAC;IAC7CR,YAAY,CAACU,OAAO,CAAC,iBAAiB,EAAEX,eAAe,CAAC;EAC1D,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEF,CAAC,CAAC;EAC1D;AACF,CAAC;AAED,MAAMO,YAAY,GAAGhB,WAAW,CAAC;EAC/BiB,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,gBAAgB,EAAE,CAAC,GAAGlB,YAAY,CAAC;IACnCmB,QAAQ,EAAE,CAAC,GAAGnB,YAAY,CAAC;IAC3BoB,OAAO,EAAE,CAAC,GAAGnB,UAAU,CAAC;IACxBoB,eAAe,EAAEnB,yBAAyB,CAAC,CAAC;IAC5CoB,gBAAgB,EAAE,CAAC,GAAGtB,YAAY,CAAC,CAAE;EACvC,CAAC;EACDuB,QAAQ,EAAE;IACRC,UAAUA,CAACZ,KAAK,EAAEa,MAAM,EAAE;MACxB,MAAMC,cAAc,GAAG,CAAC,GAAGd,KAAK,CAACS,eAAe,EAAEI,MAAM,CAACE,OAAO,CAAC;MACjEhB,uBAAuB,CAACe,cAAc,CAAC;MACvCd,KAAK,CAACS,eAAe,GAAGK,cAAc;;MAEtC;MACAd,KAAK,CAACU,gBAAgB,GAAGV,KAAK,CAACM,gBAAgB,CAACU,MAAM,CAAEC,OAAO,IAC7DH,cAAc,CAACI,KAAK,CAAEF,MAAM,IAAK;QAC/B,MAAM,CAACG,GAAG,EAAEC,KAAK,CAAC,GAAGJ,MAAM,CAACK,KAAK,CAAC,GAAG,CAAC;QACtC,OAAOJ,OAAO,CAACE,GAAG,CAAC,KAAKC,KAAK;MAC/B,CAAC,CACH,CAAC;IACH,CAAC;IACDE,aAAaA,CAACtB,KAAK,EAAE;MACnBR,YAAY,CAAC+B,UAAU,CAAC,iBAAiB,CAAC;MAC1CvB,KAAK,CAACS,eAAe,GAAG,EAAE;MAC1BT,KAAK,CAACU,gBAAgB,GAAG,CAAC,GAAGV,KAAK,CAACM,gBAAgB,CAAC;IACtD;EACF;AACF,CAAC,CAAC;AAEF,eAAeH,YAAY,CAACqB,OAAO;AACnC,OAAO,MAAM;EAAEZ,UAAU;EAAEU;AAAc,CAAC,GAAGnB,YAAY,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}